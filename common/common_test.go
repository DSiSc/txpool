package common

import (
	"github.com/DSiSc/craft/types"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
)

var emptyTx *types.Transaction

func TestNewTransaction(t *testing.T) {
	assert := assert.New(t)
	b := types.Address{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	emptyTx = NewTransaction(
		0,
		b,
		big.NewInt(0),
		0,
		big.NewInt(0),
		b[:10],
		b,
	)
	assert.NotNil(emptyTx)
	assert.Equal(emptyTx.Data.From, &b)
	assert.Equal(emptyTx.Data.Recipient, &b)
	assert.Equal(emptyTx.Data.AccountNonce, uint64(0))
	assert.Equal(emptyTx.Data.GasLimit, uint64(0))
	assert.Equal(emptyTx.Data.Price, big.NewInt(0))
}

func TestSum(t *testing.T) {
	b := []byte{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	c := Sum(b)
	except := []byte{
		0x5b, 0x49, 0xff, 0xa2, 0x47, 0x5e, 0x11, 0x40, 0x92, 0xb,
		0x4, 0x6, 0x43, 0xc5, 0x7f, 0x8e, 0x5b, 0xb1, 0x86, 0x4, 0xeb,
		0xcc, 0x62, 0x43, 0x71, 0x39, 0x76, 0xfd, 0xa4, 0x8b, 0xc3, 0x7}
	assert.Equal(t, except, c)
}

func TestCopyBytes(t *testing.T) {
	s := CopyBytes(nil)
	assert.Nil(t, s)
	b := []byte{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	c := CopyBytes(b)
	assert.Equal(t, b, c)
}

func TestTxHash(t *testing.T) {
	assert := assert.New(t)
	b := types.Address{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	emptyTx = NewTransaction(
		0,
		b,
		big.NewInt(0),
		0,
		big.NewInt(0),
		b[:10],
		b,
	)
	exceptHash := types.Hash{
		0xca, 0xec, 0x88, 0xf3, 0x84, 0x80, 0xec, 0x37, 0xad, 0x81, 0xca, 0x82, 0xa8, 0x4, 0xfd, 0x41,
		0x6a, 0x22, 0x42, 0x85, 0x59, 0xb5, 0xfb, 0x87, 0x72, 0xc3, 0x8d, 0xf0, 0x26, 0x1f, 0x18, 0x51,
	}
	txHash := TxHash(emptyTx)
	assert.Equal(exceptHash, txHash)

	exceptHash1 := TxHash(emptyTx)
	assert.Equal(exceptHash, exceptHash1)
}
